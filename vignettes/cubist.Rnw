% \VignetteIndexEntry{Cubist Models for Regression}
% \VignetteDepends{Cubist}
% \VignettePackage{Cubist}
\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage[pdftex]{graphicx}
\usepackage{color}
\usepackage{xspace}
\usepackage{fancyvrb}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage[
         colorlinks=true,
         linkcolor=blue,
         citecolor=blue,
         urlcolor=blue]
         {hyperref}
\usepackage{Sweave}           
\SweaveOpts{keep.source=TRUE}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% define new colors for use
\definecolor{darkgreen}{rgb}{0,0.6,0}
\definecolor{darkred}{rgb}{0.6,0.0,0}
\definecolor{lightbrown}{rgb}{1,0.9,0.8}
\definecolor{brown}{rgb}{0.6,0.3,0.3}
\definecolor{darkblue}{rgb}{0,0,0.8}
\definecolor{darkmagenta}{rgb}{0.5,0,0.5}

\newcommand{\code}[1]{\mbox{\footnotesize\color{darkblue}\texttt{#1}}}
\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}
\renewcommand{\pkg}[1]{{\textsf{#1}}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontshape=sl,formatcom=\color{darkblue}}
\fvset{listparameters={\setlength{\topsep}{0pt}}}
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}}

\fvset{fontsize=\footnotesize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\bld}[1]{\mbox{\boldmath $#1$}}
\newcommand{\shell}[1]{\mbox{$#1$}}
\renewcommand{\vec}[1]{\mbox{\bf {#1}}}

\newcommand{\ReallySmallSpacing}{\renewcommand{\baselinestretch}{.6}\Large\normalsize}
\newcommand{\SmallSpacing}{\renewcommand{\baselinestretch}{1.1}\Large\normalsize}

\newcommand{\halfs}{\frac{1}{2}}

\setlength{\oddsidemargin}{-.25 truein}
\setlength{\evensidemargin}{0truein}
\setlength{\topmargin}{-0.2truein}
\setlength{\textwidth}{7 truein}
\setlength{\textheight}{8.5 truein}
\setlength{\parindent}{0.20truein}
\setlength{\parskip}{0.10truein}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\pagestyle{fancy}
\lhead{}
\chead{Cubist Models For Regression}
\rhead{}	
\lfoot{}
\cfoot{}
\rfoot{\thepage\ of \pageref{LastPage}}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{Cubist Models For Regression}
\author{Max Kuhn (max.kuhn@pfizer.com) \\ Steve Weston \\ Chris Keefer
\\Nathan Coulter}

<<startup, echo = FALSE, results = hide>>=
library(mlbench)
data(BostonHousing)
library(Cubist)
@ 

\begin{document}

\maketitle

\thispagestyle{empty}
	
\section{Introduction}

\pkg{Cubist} is an \pkg{R} port of the Cubist GPL \pkg{C} code released by RuleQuest at
\begin{center}
\href{http://rulequest.com/cubist-info.html}{http://rulequest.com/cubist-info.html}  
\end{center}
See the last section of this document for information on the porting. The other parts describes the functionality of the \pkg{R} package.


\section{Model Trees}

Cubist is a rule--based model that is an extension of Quinlan's M5 model tree. A tree is grown where the terminal leaves contain linear regression models. These models are based on the predictors used in previous splits.  Also, there are intermediate linear models at each step of the tree. A prediction is made using the linear regression model at the terminal node of the tree, but is ``smoothed'' by taking into account the prediction from the linear model in the previous node of the tree (which also occurs recursively up the tree). The tree is reduced to a set of rules, which initially are paths from the top of the tree to the bottom. Rules are eliminated via pruning and/or combined for simplification. 

This is explained better in Quinlan (1992). Wang and Witten (1997) attempted to recreate this model using a ``rational reconstruction'' of Quinlan (1992) that is the basis for the \code{M5P} model in \pkg{Weka} (and the R package \pkg{RWeka}).

An example of a model tree can be illustrated using the Boston Housing data in the \pkg{mlbench} package.
<<bh1>>=
library(Cubist)
library(mlbench)
data(BostonHousing)
BostonHousing$chas <- as.numeric(BostonHousing$chas) - 1

set.seed(1)

inTrain <- sample(1:nrow(BostonHousing), floor(.8*nrow(BostonHousing)))

trainingPredictors <- BostonHousing[ inTrain, -14]
testPredictors     <- BostonHousing[-inTrain, -14]

trainingOutcome <- BostonHousing$medv[ inTrain]
testOutcome     <- BostonHousing$medv[-inTrain]

modelTree <- cubist(x = trainingPredictors, y = trainingOutcome)
modelTree
@ 
<<bh2>>=
summary(modelTree)
@ 
There is no formula method for \code{cubist}; the predictors are specified as matrix or data frame and the outcome is a numeric vector.

There is a predict method for the model:
<<bh3>>=
mtPred <- predict(modelTree, testPredictors)
## Test set RMSE
sqrt(mean((mtPred - testOutcome)^2))
## Test set R^2
cor(mtPred, testOutcome)^2
@ 

\section{Ensembles By Committees}

The Cubist model can also use a boosting--like scheme called {\em committees} where iterative model trees are created in sequence. The first tree follows the procedure described in the last section. Subsequent trees are created using adjusted versions to the training set outcome: if the model over--predicted a value, the response is adjusted downward for the next model (and so on). Unlike traditional boosting, stage weights for each committee are not used to average the predictions from each model tree; the final prediction is a simple average of the predictions from each model tree.

The \code{committee} option can be used to control number of model trees:

<<bh4>>=
set.seed(1)
committeeModel <- cubist(x = trainingPredictors, y = trainingOutcome,
                         committees = 5)
summary(committeeModel)
@ 

For this model:
<<bh5>>=
cmPred <- predict(committeeModel, testPredictors)
## RMSE
sqrt(mean((cmPred - testOutcome)^2))
## R^2
cor(cmPred, testOutcome)^2
@ 

\section{Instance--Based Corrections}

Another innovation in Cubist using nearest--neighbors to adjust the predictions from the rule--based model. First, a model tree (with or without committees) is created. Once a sample is predicted by this model, Cubist can find it's nearest neighbors and determine the average of these training set points. See Quinlan (1993a) for the details of the adjustment.

The development of rules and committees is independent of the choice of using instances. The original \pkg{C} code allowed the program to choose whether to use instances, not use them or let the program decide. Our approach is to build a model with the \code{cubist} function that is ignorant to the decision about instances. When samples are predicted, the argument \code{neighbors} can be used to adjust the rule--based model predictions (or not). 

We can add instances to the previously fit committee model:
<<bh6>>=
instancePred <- predict(committeeModel, testPredictors, neighbors = 5)
## RMSE
sqrt(mean((instancePred - testOutcome)^2))
## R^2
cor(instancePred, testOutcome)^2
@ 
Note that the previous models used the implicit default of \code{neighbors = 0} for their predictions.

To tune the model over different values of \code{neighbors} and
\code{committees}, the \code{train} function in the
\href{http://cran.r-project.org/web/packages/caret/index.html}{caret}
package can be used to optimize these parameters. For example:

<<tune>>=
library(caret)

set.seed(1)
cTune <- train(x = trainingPredictors, y = trainingOutcome,
               "cubist",
               tuneGrid = expand.grid(committees = c(1, 10, 50, 100), 
                                      neighbors = c(0, 1, 5, 9)),
               trControl = trainControl(method = "cv"))
cTune
@ 

Figure \ref{tune} shows the profiles of the tuning parameters produced
using \code{plot(cTune)}.


\setkeys{Gin}{width=.6\textwidth}
\begin{figure}[t!]
  \begin{center}	
<<tune, echo = FALSE, fig = TRUE, width = 6, height = 4.25>>=
trellis.par.set(caretTheme())
print(plot(cTune, aut.key = list(columns = 4)))
@ 
    \caption{The relationship between performance and the two tuning
      parameters, as estimated using cross--validation.}
    \label{tune}
  \end{center}
\end{figure}


It may also be useful to see how different models fit a single predictor:
<<lstat>>=
lstat <- trainingPredictors[, "lstat", drop = FALSE]
justRules <- cubist(x = lstat, y = trainingOutcome)
andCommittees <- cubist(x = lstat, y = trainingOutcome, committees = 100)
@ 

Figure \ref{lstat} shows the model fits for the test data. For these
data, there doesn't appear to be much of a improvement when committees
or instances are added to the based rules.

\setkeys{Gin}{width=.7\textwidth}
\begin{figure}[t]
  \begin{center}	
<<lstatPlot, echo = FALSE, fig = TRUE, width = 8, height = 4.5>>=
lstatTest <- testPredictors[, "lstat", drop = FALSE]
newOrder <- order(lstatTest$lstat)
lstatTest <- lstatTest[newOrder,,drop = FALSE]
testOutcome <- testOutcome[newOrder]
plot(lstatTest$lstat, testOutcome,
     pch = 16, col = rgb(.2, .2, .2, .5),
     xlab = "lstat", ylab = "Median Home Value")
points(lstatTest$lstat, predict(justRules, lstatTest),
       type = "l", lwd = 2, col = "black")
points(lstatTest$lstat, predict(justRules, lstatTest, neighbors = 5),
       type = "l", lwd = 2, col = "blue")
points(lstatTest$lstat, predict(andCommittees, lstatTest),
       type = "l", lwd = 2, col = "darkred")
legend(20, 50,
       c("Rules", "100 Committees", "Rules + 5 Neighbors"),
       col = c("black", "darkred", "blue"),
       lwd = rep(2, 3))
@ 
    \caption{Different Cubist models for a single predictor.}
    \label{lstat}
  \end{center}
\end{figure}

\section{Variable Importance}

The \code{modelTree} method for Cubist shows the usage of each variable in either the rule conditions or the (terminal) linear model. In actuality, many more linear models are used in prediction that are shown in the output.  Because of this,  the variable usage statistics shown at the end of the output of the \code{summary} function will probably be inconsistent with the rules also shown in the output. At each split of the tree, Cubist saves a linear model (after feature selection) that is allowed to have terms for each variable used in the current split or any split above it. Quinlan (1992) discusses a smoothing algorithm where each model prediction is a linear combination of the parent and child model along the tree. As such, the final prediction is a function of all the linear models from the initial node to the terminal node. The percentages shown in the Cubist output reflects all the models involved in prediction (as opposed to the terminal models shown in the output).

The raw usage statistics are contained in a data frame called
\code{usage} in the \code{cubist} object. 

The \pkg{caret} package has a general variable importance method
\code{varImp}. When using this function on a \code{cubist} argument,
the variable importance is a linear combination of the usage in the rule conditions and the model. 


For example:
<<vimp>>=
summary(modelTree)
modelTree$usage
library(caret)
varImp(modelTree)
@ 

It should be noted that this variable importance measure does not capture the influence of the predictors when using the instance--based correction.


\section{Exporting the Model}

As previously mentioned, this code is a port of the command--line \pkg{C} code. To run the \pkg{C} code, the training set data must be converted to a specific file format as detailed on the RuleQuest website. Two files are created. The \texttt{file.data} file is a header--less, comma delimited version of the data (the \texttt{file} part is a name given by the user). The \texttt{file.names} file provides information about the columns (eg. levels for categorical data and so on). After running the \pkg{C} program, another text file called \texttt{file.models}, which contains the information needed for prediction. 

Once a model has been built with the \pkg{R} \pkg{cubist} package, the \code{exportCubistFiles} can be used to create the \texttt{.data}, \texttt{.names} and \texttt{.model} files so that the same model can be run at the command--line.


\section{Current Limitations}

There are a few features in the \pkg{C} code that are not yet operational in the \pkg{R} package:
\begin{itemize}
  \item only continuous and categorical predictors can be used (the
    original source code allows for other data types)
  \item there is an option to let the \pkg{C} code decide on using instances or not. The choice is more explicit in this package
  \item non--standard predictor names are not currently checked/fixed
  \item the \pkg{C} code supports binning of predictors
\end{itemize}
Many of these features will be implemented in the future.


\section{About the Cubist C Code and Our Approach}

This section may be interesting or important to those of you who care about the implementation (if you exist at all).

The cubist sources are written to take specific data files from the file system,
pull them into memory, run the computations, then write the results to a text
file that is also saved to the file system. The code makes use of a lot of global variables (especially for the data). 
The code has been around for a while and, after reading it, one can tell
that the author put in a lot of time to catch many special cases. At Pfizer, we have
pushed millions of samples through the non--GPL code without any substantive errors.

So the approach here is to pass in the training data as strings that mimic
the formats that one would use with the command line version and get back the
textual representation that would be saved to the \texttt{.model} file also as a string.
The prediction function would then pass the model text string (and the data text
string if instances are used) to the C code for prediction.

We did this for a few reasons. First, this approach would require us to re--write \code{main()} and touch as little of the
original code as possible (otherwise we would have to write a parser for the
data and try to get it into the global variable structure with complete fidelity). Second, 
most modeling functions implicitly assume that the data matrix is all numeric,
thus factors are converted to dummy variables etc. Cubist doesn't want categorical
data split into dummy variables based on how it does splits. Thus, we would have
to pass in the numeric and categorical predictors separately unless we want to
get really fancy.


\section{Session Information}

<<<session, echo=FALSE, results=tex>>=
toLatex(sessionInfo())
@

\section{References}

\begin{description}
   \item Quinlan. Learning with continuous classes. Proceedings of the 5th Australian Joint Conference On Artificial Intelligence (1992) pp. 343-348

   \item Quinlan. Combining instance-based and model-based learning. Proceedings of the Tenth International Conference on Machine Learning (1993a) pp. 236-243

   \item Quinlan. {\it C4.5: Programs For Machine Learning} (1993b) Morgan Kaufmann Publishers Inc. San Francisco, CA

   \item Wang and Witten. Inducing model trees for continuous classes. Proceedings of the Ninth European Conference on Machine Learning (1997) pp. 128-137

   \item \href{http://rulequest.com/cubist-info.html}{http://rulequest.com/cubist-info.html}
\end{description}

\end{document}


      
